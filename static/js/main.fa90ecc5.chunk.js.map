{"version":3,"sources":["components/Button.js","components/Input.js","logic/operate.js","components/Output.js","components/Calculator.js","logic/calculate.js","App.js","index.js"],"names":["Button","name","clickHandler","operator","className","spanning","onClick","type","join","trim","defaultProps","Input","handleClick","buttonName","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","err","message","Error","Output","value","Calculator","useState","total","next","state","setState","obj","match","result","includes","parseFloat","calculate","App","props","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa90ecc5.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Button = ({\n  name, clickHandler, operator, spanning,\n}) => {\n  const handleClick = () => {\n    clickHandler(name);\n  };\n\n  const className = ['input-btn', spanning ? 'spanning' : '', operator ? 'operator' : ''];\n\n  return (\n    <button onClick={handleClick} type=\"button\" className={className.join(' ').trim()}>{name}</button>\n  );\n};\n\nButton.propTypes = {\n  name: PropTypes.string,\n  clickHandler: PropTypes.func,\n  operator: PropTypes.bool,\n  spanning: PropTypes.bool,\n};\n\nButton.defaultProps = {\n  name: '',\n  clickHandler: null,\n  operator: false,\n  spanning: false,\n};\n\nexport default Button;\n","import PropTypes from 'prop-types';\nimport Button from './Button';\n\nconst Input = ({ clickHandler }) => {\n  const handleClick = (buttonName) => {\n    clickHandler(buttonName);\n  };\n\n  return (\n    <div className=\"buttons-grid\">\n      <Button clickHandler={handleClick} name=\"AC\" />\n      <Button clickHandler={handleClick} name=\"+/-\" />\n      <Button clickHandler={handleClick} name=\"%\" />\n      <Button clickHandler={handleClick} operator name=\"รท\" />\n      <Button clickHandler={handleClick} name=\"7\" />\n      <Button clickHandler={handleClick} name=\"8\" />\n      <Button clickHandler={handleClick} name=\"9\" />\n      <Button clickHandler={handleClick} operator name=\"x\" />\n      <Button clickHandler={handleClick} name=\"4\" />\n      <Button clickHandler={handleClick} name=\"5\" />\n      <Button clickHandler={handleClick} name=\"6\" />\n      <Button clickHandler={handleClick} operator name=\"-\" />\n      <Button clickHandler={handleClick} name=\"1\" />\n      <Button clickHandler={handleClick} name=\"2\" />\n      <Button clickHandler={handleClick} name=\"3\" />\n      <Button clickHandler={handleClick} operator name=\"+\" />\n      <Button clickHandler={handleClick} spanning name=\"0\" />\n      <Button clickHandler={handleClick} name=\".\" />\n      <Button clickHandler={handleClick} operator name=\"=\" />\n    </div>\n  );\n};\n\nInput.propTypes = {\n  clickHandler: PropTypes.func.isRequired,\n};\n\nexport default Input;\n","import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne || '0');\n  const two = Big(numberTwo || (operation === 'รท' || operation === 'x' ? '1' : '0')); // If dividing or multiplying, then 1 maintains current value in cases of null\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    try {\n      return one.div(two).toString();\n    } catch (err) {\n      return err.message;\n    }\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import PropTypes from 'prop-types';\n\nconst Output = ({ value }) => (\n  <div className=\"output\">\n    <span>{value}</span>\n  </div>\n);\n\nOutput.propTypes = {\n  value: PropTypes.string,\n};\n\nOutput.defaultProps = {\n  value: '',\n};\n\nexport default Output;\n","import { useState } from 'react';\nimport Input from './Input';\nimport calculate from '../logic/calculate';\nimport Output from './Output';\n\nconst Calculator = () => {\n  const [state, setState] = useState({\n    total: null,\n    next: null,\n    operation: null,\n  });\n\n  const handleClick = (buttonName) => {\n    setState({ ...state, ...calculate(state, buttonName) });\n  };\n\n  const { next, total } = state;\n  return (\n    <div className=\"calculator\">\n      <Output value={next || total || '0'} />\n      <Input clickHandler={handleClick} />\n    </div>\n  );\n};\n\nexport default Calculator;\n","import Big from 'big.js';\nimport operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === '0' ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '%') {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: Big(result)\n          .div(Big('100'))\n          .toString(),\n        next: null,\n        operation: null,\n      };\n    }\n    if (obj.next) {\n      return {\n        next: Big(obj.next)\n          .div(Big('100'))\n          .toString(),\n      };\n    }\n    return {};\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    return { next: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport Calculator from './components/Calculator';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            Math Magicians\n          </h1>\n        </header>\n        <Calculator />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/style.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}